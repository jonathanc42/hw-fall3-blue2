length(well_wet)
Well_ind <- matrix(rbinom(n = n * simulation.size,
size = 1,
prob = rtruncnorm(n * simulation.size, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(n * simulation.size, a=0, b=1, mean=.8, sd=.1)),
nrow = simulation.size)
well_ind[1:5,]
well_ind[1:5,]
Well_ind[1:5,]
well_final <- well_mat * Well_ind
well_wet <- apply(well_final,1,sum)
hist(well_wet)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 * 2, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 2, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 2, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 2, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 3, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 3, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(3 * 1, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(1, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm( a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(1, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3, a=0, b=1, mean=.8, sd=.1)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(1 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(1 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(60, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4,
nrow = 2))
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.4)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.4)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.5)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.5)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.5,0.6)),
nrow = 2)
?rbinom
hist(well_wetï¼Œ main="Number of Wet wells",
col = "lightgray", xlab = "Number")
hist(nwells - well_wet, main="Number of dry wells",
col = "lightgray", xlab = "Number")
hist(well_wet, main="Number of Wet wells",breaks = 100,
col = "lightgray", xlab = "Number")
hist(well_wet /nwells, main="Proportion of Wet Wells",
col = "lightgray", xlab = "Proportion")
proportion = well_wet /nwells
quantile(proportion, c(.05))
# ES at 1 %
mean(proportion[proportion<quantile(proportion, c(.05))])
var = quantile(proportion, c(.05))
abline(v = var, col="red", lwd=2)
mtext("5% VaR: 0.59", at=var, col="red")
median(proportion)
mean(proportion)
sd(proportion)
quantile(proportion, c(.05, .95))
sd(proportion)/mean(proportion)
mean(well_wet)
median(well_wet)
median(nwells - well_wet)
load(final_data.Rdata)
load('final_data.Rdata')
pwd
load('final_data.Rdata')
setwd("~/GitHub/hw-fall3-blue2/Clustering")
load('final_data.Rdata')
library(splines)
times <- seq(1,295)/100 # Observations in 1/100th of a second
X <- bs(times,intercept=TRUE,df=60) #create a spline to
#model the data
betas <- matrix(0,ncol=60,nrow = 6792)
###########################################################
# run a linear regression on each data set
# here I am manipulating my data you I can cluster
###########################################################
for (ii in 1:6792){
temp <- lm(as.numeric(final_data[ii,6:300])~X-1) #-1 removes the natural intercept
betas[ii,]  <- coefficients(temp)
}
cdata <- cbind(final_data[,1:5],betas)
#CONVERT EVERTYING TO 'numbers'
cdata$AGE <- as.numeric(cdata$AGE)
cdata$EVER_SMOKE <- as.numeric(cdata$EVER_SMOKE)
cdata$ASTHMA <- as.numeric(cdata$ASTHMA)
cdata$POVERTY_RATIO <- as.numeric(cdata$POVERTY_RATIO)
View(betas)
seq(1,5)
?bs
View(cdata)
#### running PCA ####
spiropca <- princomp(cdata[,2:65])
spiropca$sdev
#### running PCA ####
set.seed(12345)
spiropca <- princomp(cdata[,2:65])
spiropca$sdev
fviz_nbclust(scale(cdata$scores), kmeans, method = "wss",k.max=20)
library(splines)
library(readr)
library(factoextra)
library(dplyr)
fviz_nbclust(scale(cdata$scores), kmeans, method = "wss",k.max=20)
fviz_nbclust(scale(spiropca$scores), kmeans, method = "wss",k.max=20)
fviz_nbclust(scale(absent$scores), kmeans, method = "gap",k.max=10)
fviz_nbclust(scale(spiropca$scores), kmeans, method = "gap",k.max=10)
kmeans
kmean_4 <- kmeans(scale(absent$scores),4,nstart=25)
kmean_4 <- kmeans(spiropca(absent$scores),4,nstart=25)
kmean_4 <- kmeans(scale(spiropca$scores),4,nstart=25)
kmean_4 <- kmeans(scale(spiropca$scores),4,nstart=10)
View(kmean_4)
cdata$clust <- kmean_4$cluster
View(cdata)
clusters <- list()
for( ii in 1:4){
clusters[[ii]] <-  cdata %>% filter(clust == ii)
}
View(clusters)
#### Find the means of each cluster to "Name them" ####
x <- cbind(colMeans(cdata))
View(x)
y <- x
for (ii in 1:4) {
x <- cbind(x,colMeans(clusters[[ii]])-y)
}
View(cdata)
clusters[:,1]
clusters[,1]
clusters[1]
clusters[1][,1]
clusters[1][:,1]
clusters[1]
clusters[1][1:20]
clusters[1][,1:20]
clusters[[1]][,1:20]
clusters[[1]][,6:20]
clusters[[1]][,6:-1]
clusters[[1]][,6:60]
clusters[[1]][,6:65]
clusters[[1]][,6:65].apply(mean)
apply(clusters[[1]][,6:65])
apply(clusters[[1]][,6:65],mean)
apply(clusters[[1]][,6:65],2,mean)
kk->apply(clusters[[1]][,6:65],2,mean)
kk<-apply(clusters[[1]][,6:65],2,mean)
kk
plot(kk)
line_clust1<-apply(clusters[[1]][,6:65],2,mean)
line_clust2<-apply(clusters[[2]][,6:65],2,mean)
line_clust3<-apply(clusters[[3]][,6:65],2,mean)
line_clust4<-apply(clusters[[4]][,6:65],2,mean)
plot(line_clust1)
plot(line_clust2)
plot(line_clust3)
plot(line_clust4)
line(line_clust1)
plot(line_clust1, type = '')
plot(line_clust1, type = 'l')
plot(line_clust1, type = 'l')
plot(line_clust2, type = 'l')
plot(line_clust3, type = 'l')
plot(line_clust4, type = 'l')
plot(line_clust1, type = 'l')
lines(line_clust2, type = 'l')
lines(line_clust3, type = 'l')
lines(line_clust4, type = 'l')
plot(line_clust1, type = 'l', ylim=c(0,85))
lines(line_clust2)
lines(line_clust3)
lines(line_clust4)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1)
lines(line_clust2, col=2)
lines(line_clust3, col=3)
lines(line_clust4, col=4)
View(clusters)
legend(1, 95, legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), cex=0.8)
legend(1, 95, legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lty=1:4, cex=0.8)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lty=1:4, cex=0.8)
line_clust1<-apply(clusters[[1]][,6:65],2,mean)
line_clust2<-apply(clusters[[2]][,6:65],2,mean)
line_clust3<-apply(clusters[[3]][,6:65],2,mean)
line_clust4<-apply(clusters[[4]][,6:65],2,mean)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1)
lines(line_clust2, col=2)
lines(line_clust3, col=3)
lines(line_clust4, col=4)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lty=1:4, cex=0.8)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1)
lines(line_clust2, col=2)
lines(line_clust3, col=3)
lines(line_clust4, col=4)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lwd=2, cex=0.8)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1, lwd=2)
lines(line_clust2, col=2, lwd=2)
lines(line_clust3, col=3, lwd=2)
lines(line_clust4, col=4, lwd=2)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lwd=2, cex=0.8)
sfun <- splinefun(line_clust1)   #this creates an interpolant of the curve from min(times) to max(times)
sfun
plot(sfun)
sfun <- splinefun(seq(1,60),line_clust1)   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun)
sfun <- splinefun(seq(1,60),line_clust1)   #this creates an interpolant of the curve from min(times) to max(times)
sfun
line_clust1
class(line_clust1)
line_clust1$name
names(line_clust1)
sfun <- splinefun(names(line_clust1),line_clust1)   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun)
sfun <- spline(names(line_clust1),line_clust1)   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1, lwd=2)
lines(line_clust2, col=2, lwd=2)
lines(line_clust3, col=3, lwd=2)
lines(line_clust4, col=4, lwd=2)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lwd=2, cex=0.8)
plot(sfun, type='l')
sfun <- spline(names(line_clust1),line_clust1, method='natural')   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun, type='l')
sfun <- spline(names(line_clust1),line_clust1, method='periodic')   #this creates an interpolant of the curve from min(times) to max(times)
sfun <- spline(names(line_clust1),line_clust1, method='monoH.FC')   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun, type='l')
sfun <- spline(names(line_clust1),line_clust1, method='hyman')   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun, type='l')
sfun <- spline(names(line_clust1),line_clust1)   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun, type='l')
sfun <- spline(line_clust1)   #this creates an interpolant of the curve from min(times) to max(times)
plot(sfun, type='l')
line_clust1<-spline(apply(clusters[[1]][,6:65],2,mean))
line_clust2<-spline(apply(clusters[[2]][,6:65],2,mean))
line_clust3<-spline(apply(clusters[[3]][,6:65],2,mean))
line_clust4<-spline(apply(clusters[[4]][,6:65],2,mean))
plot(line_clust1, type = 'l', ylim=c(0,90), col=1, lwd=2)
lines(line_clust2, col=2, lwd=2)
lines(line_clust3, col=3, lwd=2)
lines(line_clust4, col=4, lwd=2)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lwd=2, cex=0.8)
library(splines)
library(factoextra)
library(dplyr)
times <- seq(1,295)/100 # Observations in 1/100th of a second
X <- bs(times,intercept=TRUE,df=60) #create a spline to
#model the data
betas <- matrix(0,ncol=60,nrow = 6792)
load('Clustering/final_data.Rdata')
#model the data
betas <- matrix(0,ncol=60,nrow = 6792)
###########################################################
# run a linear regression on each data set
# here I am manipulating my data you I can cluster
###########################################################
for (ii in 1:6792){
temp <- lm(as.numeric(final_data[ii,6:300])~X-1) #-1 removes the natural intercept
betas[ii,]  <- coefficients(temp)
}
cdata <- cbind(final_data[,1:5],betas)
nalist <- rep(0,10000)
for (ii in 1:10000){
temp <- lm(as.numeric(sp[ii,])~X-1) #-1 removes the natural intercept
betas[ii,]  <- coefficients(temp)
nalist[ii] <- sum(is.na(betas[ii,]))
}
bet <- betas[nalist == 0,]
#CONVERT EVERTYING TO 'numbers'
cdata$AGE <- as.numeric(cdata$AGE)
cdata$EVER_SMOKE <- as.numeric(cdata$EVER_SMOKE)
cdata$ASTHMA <- as.numeric(cdata$ASTHMA)
cdata$POVERTY_RATIO <- as.numeric(cdata$POVERTY_RATIO)
#running PCA#
spiropca <- princomp(cdata[,2:65])
spiropca$sdev
# Plot this
fviz_nbclust(scale(spiropca$scores), kmeans, method = "wss",k.max=20)
fviz_nbclust(scale(spiropca$scores), kmeans, method = "silhouette",k.max=20)
set.seed(12345)
#Creating 4 clusters and adding to PCA
kmean_4 <- kmeans(scale(spiropca$scores),4,nstart=25)
cdata$clust <- kmean_4$cluster
#Creating means and stdev matrices
cmeans <- matrix(colMeans(bet),64,1)
stdev  <- matrix(apply(bet,2,sd),64,1)
bet <- betas[nalist == 0,]
nalist <- rep(0,10000)
for (ii in 1:10000){
temp <- lm(as.numeric(sp[ii,])~X-1) #-1 removes the natural intercept
betas[ii,]  <- coefficients(temp)
nalist[ii] <- sum(is.na(betas[ii,]))
}
cl1 <- matrix(kmean_4$centers[1,],64,1)
bl1 <- cl1 * stdev + cmeans
plot(times,X%*%bl1,ylab="ML",xlab = "Time",type = 'l',lwd=2,col=1,ylim=c(0,100))
cl2 <- matrix(k_means4$centers[2,],40,1)
bl2 <- cl2 * stdev + cmeans
lines(times,X%*%bl2,lwd=2,col=2)
cl3 <- matrix(k_means4$centers[3,],40,1)
bl3 <- cl3 * stdev + cmeans
lines(times,X%*%bl3,lwd=2,col=3)
cl4 <- matrix(k_means4$centers[4,],40,1)
bl4 <- cl4 * stdev + cmeans
lines(times,X%*%bl4,lwd=2,col=4)
#
clusters <- list()
for( ii in 1:4){
clusters[[ii]] <-  cdata %>% filter(clust == ii)
}
# Find the means of each cluster to "Name them"
x <- cbind(colMeans(cdata))
y <- x
for (ii in 1:4) {
x <- cbind(x,colMeans(clusters[[ii]])-y)
}
kmean_4$centers
#Graphing each cluster on original scale
line_clust1<-apply(clusters[[1]][,2:65],2,mean)
line_clust2<-apply(clusters[[2]][,2:65],2,mean)
line_clust3<-apply(clusters[[3]][,2:65],2,mean)
line_clust4<-apply(clusters[[4]][,2:65],2,mean)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1)
lines(line_clust2, col=2)
lines(line_clust3, col=3)
lines(line_clust4, col=4)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lwd = 2, cex=0.8)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1, lwd=2)
lines(line_clust2, col=2, lwd=2)
lines(line_clust3, col=3, lwd=2)
lines(line_clust4, col=4, lwd=2)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lwd = 2, cex=0.8)
#Graphing each cluster on original scale
line_clust1<-apply(clusters[[1]][,2:65],2,mean)
line_clust2<-apply(clusters[[2]][,2:65],2,mean)
line_clust3<-apply(clusters[[3]][,2:65],2,mean)
line_clust4<-apply(clusters[[4]][,2:65],2,mean)
plot(line_clust1, type = 'l', ylim=c(0,90), col=1, lwd=2)
lines(line_clust2, col=2, lwd=2)
lines(line_clust3, col=3, lwd=2)
lines(line_clust4, col=4, lwd=2)
legend("topright", legend=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4"), col=c(1, 2, 3, 4), lwd = 2, cex=0.8)
set.seed(12345)
library(mclust)
clustBIC <-mclustBIC(cdata[,10:20],G=1:20, modelNames='VVV')   # This is model selection
plot(clustBIC)
mod1 <- Mclust(cdata[,10:20], G = 6, modelNames = 'VVV')
summary(mod1,parameters = TRUE)
plot(mod1$parameters)
plot(mod1$parameters$mean[,1])
line_mod5<-
line_mod6<-
plot(line_mod1, type = 'l', ylim=c(0,90), col=1)
line_mod5<-
line_mod6<-
plot(mod1$parameters$mean[,1], type = 'l', ylim=c(0,90), col=1)
lines(mod1$parameters$mean[,2], col=2)
lines(mod1$parameters$mean[,3], col=3)
lines(mod1$parameters$mean[,4], col=4)
lines(mod1$parameters$mean[,5], col=5)
lines(mod1$parameters$mean[,6], col=6)
xlabel(label = "123", line = 3)
xlabel(label = "123")
line_mod5<-
line_mod6<-
plot(mod1$parameters$mean[,1], type = 'l', ylim=c(0,90), col=1, xlab = 'omg')
line_mod5<-
line_mod6<-
plot(mod1$parameters$mean[,1], type = 'l', ylim=c(0,90), col=1, xlab = 'omg', ylab='time')
lines(mod1$parameters$mean[,2], col=2)
lines(mod1$parameters$mean[,3], col=3)
lines(mod1$parameters$mean[,4], col=4)
lines(mod1$parameters$mean[,5], col=5)
lines(mod1$parameters$mean[,6], col=6)
ggplot(data=df,mapping=aes(x=x,y=y,color=id,shape=class)) + geom_point()
mod1 <- Mclust(cdata, G = 6, modelNames = 'VVV')
mod1 <- Mclust(cdata[,10:20], G = 6, modelNames = 'VVV')
View(cdata)
mod1$classification
mod1$parameters
mod1$parameters$mean
clusters %>% group_by('clust')
clusters %>% groupby('clust')
clusters
clusters[[1]]
clusters[[1]]$ASTHMA
clusters[[2]]$ASTHMA
clusters[[3]]$ASTHMA
clusters[[4]]$ASTHMA
mean(clusters[[1]]$ASTHMA)
mean(clusters[[2]]$ASTHMA)
mean(clusters[[3]]$ASTHMA)
mean(clusters[[4]]$ASTHMA)
load('Clustering/final_data.Rdata')
mean(clusters[[1]]$AGE)
mean(clusters[[2]]$AGE)
mean(clusters[[3]]$AGE)
mean(clusters[[4]]$AGE)
mean(clusters[[1]]$EVER_SMOKE)
mean(clusters[[2]]$EVER_SMOKE)
mean(clusters[[3]]$EVER_SMOKE)
mean(clusters[[4]]$EVER_SMOKE)
mean(clusters[[1]]$POVERTY_RATIO)
mean(clusters[[2]]$POVERTY_RATIO)
mean(clusters[[3]]$POVERTY_RATIO)
mean(clusters[[4]]$POVERTY_RATIO)
X
View(X)
View(x)
set.seed(12345)
set.seed(12345)
#Creating 4 clusters and adding to PCA
kmean_4 <- kmeans((spiropca$scores),4,nstart=25)
cdata$clust <- kmean_4$cluster
#
clusters <- list()
for( ii in 1:4){
clusters[[ii]] <-  cdata %>% filter(clust == ii)
}
mean(clusters[[1]]$ASTHMA)
mean(clusters[[2]]$ASTHMA)
mean(clusters[[3]]$ASTHMA)
mean(clusters[[4]]$ASTHMA)
mean(clusters[[1]]$AGE)
mean(clusters[[2]]$AGE)
mean(clusters[[3]]$AGE)
mean(clusters[[4]]$AGE)
mean(clusters[[1]]$EVER_SMOKE)
mean(clusters[[2]]$EVER_SMOKE)
mean(clusters[[3]]$EVER_SMOKE)
mean(clusters[[4]]$EVER_SMOKE)
mean(clusters[[1]]$POVERTY_RATIO)
mean(clusters[[2]]$POVERTY_RATIO)
mean(clusters[[3]]$POVERTY_RATIO)
mean(clusters[[4]]$POVERTY_RATIO)
exp(-0.1)
exp(0.94)
ls
load('Clustering/final_data.Rdata')
View(final_data)
write.csv(x = final_data,'final_data.csv')
