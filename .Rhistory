x
dnorm(x=c(min(IC), max(IC), n = simulation.size))
min(IC)
max(IC)
mydensity <- dnorm(x=c(min(IC), max(IC), n = simulation.size), mean = IC.mean, sd = IC.sd))
mydensity <- dnorm(x=c(min(IC), max(IC), n = simulation.size), mean = IC.mean, sd = IC.sd)
mydensity
mydensity <- dnorm(x=c(min(IC), max(IC), n = simulation.size), mean = IC.mean, sd = IC.sd)
mydensity$y <- mydensity$y * multiplier[1]
multiplier
multiplier <- myhist$counts / myhist$density
multiplier
myhist$counts
myhist$density
myhist <- hist(IC)
h <- hist(IC, breaks = 10, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(g), max(g), length = 40)
xfit <- seq(min(IC), max(IC), length = 40)
xfit
yfit <- dnorm(xfit, mean = mean(IC), sd = sd(IC))
yfit <- yfit * diff(h$mids[1:2]) * length(g)
yfit <- yfit * diff(h$mids[1:2]) * length(IC)
lines(xfit, yfit, col = "black", lwd = 2)
h <- hist(IC, breaks = 100, density = 10,
col = "lightgray", xlab = "Accuracy", main = "Overall")
h <- hist(IC, breaks = 100,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(IC), max(IC), length = 40)
yfit <- dnorm(xfit, mean = mean(IC), sd = sd(IC))
yfit <- yfit * diff(h$mids[1:2]) * length(IC)
lines(xfit, yfit, col = "black", lwd = 2)
h <- hist(IC, breaks = 100,
col = "lightgray", xlab = "Accuracy", main = "Overall")
xfit <- seq(min(IC), max(IC), length = 40)
yfit <- dnorm(xfit, mean = mean(IC), sd = sd(IC))
yfit <- yfit * diff(h$mids[1:2]) * length(IC)
lines(xfit, yfit, col = "blue", lwd = 2)
h <- hist(IC, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Accuracy", main = "Overall")
h <- hist(IC, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Accuracy", main = "Overall")
h <- hist(IC, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Accuracy")
xfit <- seq(min(IC), max(IC), length = 40)
yfit <- dnorm(xfit, mean = mean(IC), sd = sd(IC))
yfit <- yfit * diff(h$mids[1:2]) * length(IC)
lines(xfit, yfit, col = "blue", lwd = 2)
# plot the histogray and add a normal line to check the fit
h <- hist(IC, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Cost")
xfit <- seq(min(IC), max(IC), length = 40)
yfit <- dnorm(xfit, mean = mean(IC), sd = sd(IC))
yfit <- yfit * diff(h$mids[1:2]) * length(IC)
lines(xfit, yfit, col = "blue", lwd = 2)
source('~/GitHub/hw-fall3-blue2/Simulation/HW-1.R', echo=TRUE)
source('~/GitHub/hw-fall3-blue2/Simulation/HW-2.R', echo=TRUE)
rm(list=ls())
dev.off()
source('~/GitHub/hw-fall3-blue2/Simulation/HW-2.R', echo=TRUE)
dev.off()
dev.off()
source('~/GitHub/hw-fall3-blue2/Simulation/HW-2.R', echo=TRUE)
IC.mean
IC.sd
median(NPV)
mean(NPV)
sd(NPV)
quantile(NPV, c(.05, .95))
sd(NPV)/mean(NPV)
source('~/GitHub/hw-fall3-blue2/Simulation/HW-2.R', echo=TRUE)
write.csv(x = NPV,file = 'NPV.csv')
write.csv(x = IC,file = 'IC.csv')
rm(list=ls())
source('~/GitHub/hw-fall3-blue2/Simulation/HW-2.R', echo=TRUE)
# plot the histogray and add a normal line to check the fit to make it look even normal
h <- hist(IC, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Cost")
xfit <- seq(min(IC), max(IC), length = 40)
yfit <- dnorm(xfit, mean = mean(IC), sd = sd(IC))
yfit <- yfit * diff(h$mids[1:2]) * length(IC)
lines(xfit, yfit, col = "blue", lwd = 2)
# plot the histogray and add a normal line to check the fit to make it look even normal
h <- hist(IC, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Cost")
# plot the histogray and add a normal line to check the fit to make it look even normal
h <- hist(IC//1e6, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Cost in Million")
# plot the histogray and add a normal line to check the fit to make it look even normal
h <- hist(IC/1e6, breaks = 100, main='Initial Dry Well Cost 2019',
col = "lightgray", xlab = "Cost in Million")
# visualize the value
# in order to present less zeros, using millions, you making crazy money
hist(NPV/1e6, xlab = 'Million',main='Net Present Value 2033')
# visualize the value
# in order to present less zeros, using millions, you making crazy money
hist(NPV/1e6, xlab = 'Value in Million',main='Net Present Value 2033')
# visualize the value
# in order to present less zeros, using millions, you making crazy money
hist(NPV/1e6, breaks = 100,xlab = 'Value in Million',main='Net Present Value 2033')
# VaR at 1 %
quantile(NPV, c(.01))
quantile(NPV, c(.01))/1e6
abline(v = quantile(NPV, c(.01)), col="red", lwd=2)
abline(v = quantile(NPV, c(.01)), col="red", lwd=2)
mtext("1% VaR: -4.5M", at=quantile(NPV, c(.01)), col="red")
# visualize the value
# in order to present less zeros, using millions, you making crazy money
hist(NPV/1e6, breaks = 100,xlab = 'Value in Million',main='Net Present Value 2033')
abline(v = quantile(NPV, c(.01)), col="red", lwd=2)
mtext("1% VaR: -4.5M", at=quantile(NPV, c(.01)), col="red")
abline(v = quantile(NPV, c(.01))/1e6, col="red", lwd=2)
mtext("1% VaR: -4.5M", at=quantile(NPV, c(.01))/1e6, col="red")
# if you want to see the change after decomposition
# you can also change the position of IP and DR
# you will see how panic the uniform distribution deshaped
# summary(DR)
# summary(IP)
# hist(IP)
# hist(DR)
# summary(DR.transformed)
# summary(IP.transformed)
hist(DR.transformed)
hist(IP.transformed)
BothX <- cbind(standardize(IP), standardize(DR))
SBX <- t(U %*% t(BothX))
final.SBX <- cbind(destandardize(SBX[,1], IP), destandardize(SBX[,2], DR))
DR.transformedX <- final.SBX[,1]
IP.transformedX <- final.SBX[,2]
hist(DR.transformedX)
hist(IP.transformedX)
par(mfrow=c(1,2))
hist(DR.transformed, breaks=100, main="Decline Rate")
hist(IP.transformed, breaks=100, main="Initial Production")
hist(DR.transformedX, breaks=100, main="Decline Rate")
hist(IP.transformedX, breaks=100, main="Initial Production")
par(mfrow=c(1,2))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform)", xlab = "DR Rate")
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(DR.transformedX, breaks=100, main="Decline Rate (uniform)", xlab = "DR Rate")
hist(IP.transformedX, breaks=100, main="Initial Production(lognormal)", xlab = "Initial Production")
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform)", xlab = "DR Rate")
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(DR.transformedX, breaks=100, main="Decline Rate (uniform)", xlab = "DR Rate")
hist(IP.transformedX, breaks=100, main="Initial Production(lognormal)", xlab = "Initial Production")
par(mfrow=c(2,2))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform)", xlab = "DR Rate")
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(DR.transformedX, breaks=100, main="Decline Rate (uniform)", xlab = "DR Rate")
hist(IP.transformedX, breaks=100, main="Initial Production(lognormal)", xlab = "Initial Production")
par(mfrow=c(1,2))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct", xlab = "DR Rate")
hist(DR.transformedX, breaks=100, main="Decline Rate (uniform) wrong", xlab = "DR Rate")
sd(NPV)/mean(NPV)
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct", xlab = "DR Rate")
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Initial Production(lognormal)", xlab = "Initial Production")
hist(DR.transformedX, breaks=100, main="Decline Rate (uniform) wrong", xlab = "DR Rate")
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct", xlab = "DR Rate")
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Decline Rate (uniform) wrong", xlab = "DR Rate")
hist(DR.transformedX, breaks=100, main="Initial Production(lognormal) wrong", xlab = "Initial Production")
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct", xlab = "DR Rate")
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Decline Rate (uniform) wrong", xlab = "DR Rate")
hist(DR.transformedX, breaks=100, main="Initial Production(lognormal) wrong",
xlab = "Initial Production",xlim = c(0, 1500))
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct",
xlab = "DR Rate", xlim = c(0, 0.5))
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Decline Rate (uniform) wrong",
xlab = "DR Rate", xlim = c(0, 0.5))
hist(DR.transformedX, breaks=100, main="Initial Production(lognormal) wrong",
xlab = "Initial Production",xlim = c(0, 1500))
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct",
xlab = "DR Rate", xlim = c(0, 0.5), density = 0.5)
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Decline Rate (uniform) wrong",
xlab = "DR Rate", xlim = c(0, 0.5))
hist(DR.transformedX, breaks=100, main="Initial Production(lognormal) wrong",
xlab = "Initial Production",xlim = c(0, 1500))
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct",
xlab = "DR Rate", xlim = c(0.1, 0.35), density = 0.5)
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Decline Rate (uniform) wrong",
xlab = "DR Rate", xlim = c(0.1, 0.35))
hist(DR.transformedX, breaks=100, main="Initial Production(lognormal) wrong",
xlab = "Initial Production",xlim = c(0, 1500))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct",
xlab = "DR Rate", xlim = c(0.1, 0.35), density = 0.5)
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Decline Rate (uniform) wrong",
xlab = "DR Rate")
hist(DR.transformedX, breaks=100, main="Initial Production(lognormal) wrong",
xlab = "Initial Production",xlim = c(0, 1500))
par(mfrow=c(1,4))
hist(DR.transformed, breaks=100, main="Decline Rate (uniform) correct",
xlab = "DR Rate", xlim = c(0.1, 0.35))
hist(IP.transformed, breaks=100, main="Initial Production (lognormal)", xlab = "Initial Production")
hist(IP.transformedX, breaks=100, main="Decline Rate (uniform) wrong",
xlab = "DR Rate")
hist(DR.transformedX, breaks=100, main="Initial Production(lognormal) wrong",
xlab = "Initial Production",xlim = c(0, 1500))
install.packages("msm")
install.packages("readxl")
library(msm)
library(readxl)
library(dplyr)
library(truncnorm)
install.packages("truncnorm")
library(purrr)
？purrr
?PURRR
?purrr
install.packages(c("dplyr", "ggplot2", "Rcpp", "rstudioapi", "shiny", "tidyr", "xts", "zoo"))
#### Initial setting ####
# set up the random seed as 42 per The Hitchhiker's Guide to the Galaxy to answer everything
set.seed(42)
# set up simulation.size as 10 Million
simulation.size=10000000
rtnorm(n = simulation.size, mean=0, sd=1, lower=-Inf, upper=Inf)
p.h <- rtnorm(n = simulation.size, mean=0.99, sd=0.05, lower=-Inf, upper=Inf)
p.r <- rtnorm(n = simulation.size, mean=0.8, sd=0.1, lower=-Inf, upper=Inf)
hist(p.h)
hist(p.r)
p.h <- rtnorm(n = simulation.size, mean=0.99, sd=0.05, lower=0, upper=1)
p.r <- rtnorm(n = simulation.size, mean=0.8, sd=0.1, lower=0, upper=1)
hist(p.h)
hist(p.r)
dim(p.h)
dim(p.r)
length(p.h)
length(p.r)
p <- p.h * p.r
hist(p.h, breaks = 100)
hist(p.r, breaks = 100)
#Simulates the number of planned wells
nwells <- ceiling(runif(simulation.size, min=9, max=30))
hist(nwells)
hist(nwells,breaks = 100)
hist(nwells,breaks = 20)
hist(nwells,breaks = 21)
hist(nwells,breaks = 30)
hist(nwells,breaks = 40)
hist(nwells)
#Simulates the number of planned wells
nwells <- ceiling(runif(simulation.size, min=10, max=30))
hist(nwells)
summary(nwells)
#Simulates the number of planned wells
nwells <- ceiling(runif(simulation.size, min=9, max=29))
hist(nwells)
summary(nwells)
#Simulates the number of planned wells
nwells <- ceiling(runif(simulation.size, min=9, max=30))
hist(nwells)
summary(nwells)
#Simulates the number of planned wells
nwells <- floor(runif(simulation.size, min=9, max=30))
hist(nwells)
summary(nwells)
#Simulates the number of planned wells
nwells <- floor(runif(simulation.size, min=10, max=31))
hist(nwells)
summary(nwells)
#Simulates the number of planned wells
nwells <- ceiling(runif(simulation.size, min=9, max=30))
hist(nwells)
summary(nwells)
#Simulates the number of wet wells and dry wells
producing <- rbinom(simulation.size, nwells, p)
#Simulates the number of wet wells and dry wells
producing <- rbinom(simulation.size, nwells, pw)
#Simulates the number of wet wells and dry wells
producing <- rbinom(simulation.size, nwells, probwet)
hist(producing)
producing2 <- rbinom(simulation.size, nwells, 0.7616);hist(producing2, main='a fixed test')
mean(producing)
dry <- nwells - producing
mean(dry)
mean(producing + dry)
mean(nwells)
propwet <- (producing/(producing+dry))
#histogram of the number of wet wells, dry wells, and proportion of wet
p <- hist(producing, main="Number of Wet wells",
col = "lightgray", xlab = "Number")
d <- hist(dry, main="Number of Dry Wells", breaks=10,
col = "lightgray", xlab = "Number")
wetratio <- hist(propwet, main = "Proportion of Wet Wells",
col = "lightgray", xlab="Proportion")
n=10
m=5
c(rep(1,n),rep(0,n-m))
a=c(1,2,3,4,5)
a
a.apply(c(rep(1,a),rep(0,n-a)))
matrix(data=rnorm(n=(6 * 100), mean=1, sd=2)+1,
nrow=100, byrow = TRUE)
nwells
matrix(data=rbinom((n* simulation.size),1,p),
nrow=simulation.size, byrow=TRUE)
for(i in 1:5){
print(i)
}
nwelllist <- c(3,5,6,8,1)
for(i in 1:5){
print(nwelllist[i])
}
for(i in 1:5){
print(c(rep(1,nwelllist[i]),rep(0,nnwelllist[i])))
}
print(c(rep(1,nwelllist[i]),rep(0,nwelllist[i])))
for(i in 1:5){
print(c(rep(1,nwelllist[i]),rep(0,nwelllist[i])))
}
print(c(rep(1,nwelllist[i]),rep(0,n-nwelllist[i])))
for(i in 1:5){
print(c(rep(1,nwelllist[i]),rep(0,n-nwelllist[i])))
}
k <- rep(0,5)
k
k[i]=c(rep(1,nwelllist[i]),rep(0,n-nwelllist[i]))
for(i in 1:5){
k[i]=c(rep(1,nwelllist[i]),rep(0,n-nwelllist[i]))
}
k <- matrix(rep(0,5*10),nrow=5)
for(i in 1:5){
k[i]=c(rep(1,nwelllist[i]),rep(0,n-nwelllist[i]))
}
k[i,]=c(rep(1,nwelllist[i]),rep(0,n-nwelllist[i]))
for(i in 1:5){
k[i,]=c(rep(1,nwelllist[i]),rep(0,n-nwelllist[i]))
}
k
nwells
length(nwells)
k <- matrix(rep(NA,5*10),nrow=5)
k
k <- matrix(rep(NA, n * simulation.size),nrow=simulation.size)
dim(k)
for(i in 1:simulation.size){
k[i,]=c(rep(1,nwells[i]),rep(0,n-nwells[i]))
}
for(i in 1:simulation.size){
k[i,]=c(rep(1,nwells[i]),rep(0,n-nwells[i]))
}
k
summary(nwells)
n = 30
k <- matrix(rep(NA, n * simulation.size),nrow=simulation.size)
for(i in 1:simulation.size){
k[i,]=c(rep(1,nwells[i]),rep(0,50-nwells[i]))
}
k[i,]=c(rep(1,nwells[i]),rep(0,30-nwells[i]))
rep(0,0)
rep(0,1)
for(i in 1:simulation.size){
k[i,]=c(rep(1,nwells[i]),rep(0,n-nwells[i]))
}
dim(k)
k
View(k)
View(k)
rm(k)
Well_ind <- rbinom(n = n * simulation.size,
size = 1,
prob = rtruncnorm(1, a=0, b=1, mean=.99, sd=.05) * rtruncnorm(1, a=0, b=1, mean=.8, sd=.1))
head(Well_ind)
Well_ind <- matrix(rbinom(n = n * simulation.size,
size = 1,
prob = rtruncnorm(1, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(1, a=0, b=1, mean=.8, sd=.1)),
nrow = simulation.size)
head(well_ind,10)
well_ind(1:5)
well_ind[1:5]
Well_ind[1:5]
Well_ind[1:5,]
well_mat * Well_ind
well_mat <- matrix(rep(NA, n * simulation.size),nrow=simulation.size)
for(i in 1:simulation.size){
well_mat[i,]=c(rep(1,nwells[i]),rep(0,n-nwells[i]))
}
well_final <- well_mat * Well_ind
well_wet <- apply(well_final,1,sum)
summary(well_wet)
hist(well_wet)
length(well_wet)
Well_ind <- matrix(rbinom(n = n * simulation.size,
size = 1,
prob = rtruncnorm(n * simulation.size, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(n * simulation.size, a=0, b=1, mean=.8, sd=.1)),
nrow = simulation.size)
well_ind[1:5,]
well_ind[1:5,]
Well_ind[1:5,]
well_final <- well_mat * Well_ind
well_wet <- apply(well_final,1,sum)
hist(well_wet)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 * 2, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 2, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 2, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 2, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 3, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1))
rtruncnorm(3 * 3, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(3 * 1, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(1, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm( a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)
rtruncnorm(1, a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3, a=0, b=1, mean=.8, sd=.1)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(3 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(1 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(3 * 3, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = rtruncnorm(1 , a=0, b=1, mean=.99, sd=.05) *
rtruncnorm(60, a=0, b=1, mean=.8, sd=.1)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4,
nrow = 2))
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = 0.4),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.4)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.4)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.5)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.5)),
nrow = 2)
set.seed(42)
matrix(rbinom(n = 3 * 2,
size = 1,
prob = c(0.4,0.5,0.6)),
nrow = 2)
?rbinom
hist(well_wet， main="Number of Wet wells",
col = "lightgray", xlab = "Number")
hist(nwells - well_wet, main="Number of dry wells",
col = "lightgray", xlab = "Number")
hist(well_wet, main="Number of Wet wells",breaks = 100,
col = "lightgray", xlab = "Number")
hist(well_wet /nwells, main="Proportion of Wet Wells",
col = "lightgray", xlab = "Proportion")
proportion = well_wet /nwells
quantile(proportion, c(.05))
# ES at 1 %
mean(proportion[proportion<quantile(proportion, c(.05))])
var = quantile(proportion, c(.05))
abline(v = var, col="red", lwd=2)
mtext("5% VaR: 0.59", at=var, col="red")
median(proportion)
mean(proportion)
sd(proportion)
quantile(proportion, c(.05, .95))
sd(proportion)/mean(proportion)
mean(well_wet)
median(well_wet)
median(nwells - well_wet)
